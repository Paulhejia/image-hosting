{"version":3,"file":"acc543dc61375a17d36f.bundle.js","mappings":"oBAyB+B,WAC3B,SAASA,EAAUC,GACfC,KAAKC,MAAQ,IAAIC,IAAIH,GAOzBD,EAAUK,UAAUC,IAAM,SAAUC,GAChC,OAAKL,KAAKM,IAAID,KACVL,KAAKC,MAAMG,IAAIC,IACR,IASfP,EAAUK,UAAUI,OAAS,SAAUF,GACnC,QAAIL,KAAKM,IAAID,IACFL,KAAKC,MAAMM,OAAOF,IASjCP,EAAUK,UAAUG,IAAM,SAAUD,GAChC,OAAOL,KAAKC,MAAMK,IAAID,IAM1BP,EAAUK,UAAUK,OAAS,WACzB,OAjD4C,SAAUC,EAAIC,EAAMC,GACpE,GAAIA,GAA6B,IAArBC,UAAUC,OAAc,IAAK,IAA4BC,EAAxBC,EAAI,EAAGC,EAAIN,EAAKG,OAAYE,EAAIC,EAAGD,KACxED,GAAQC,KAAKL,IACRI,IAAIA,EAAKG,MAAMd,UAAUe,MAAMC,KAAKT,EAAM,EAAGK,IAClDD,EAAGC,GAAKL,EAAKK,IAGrB,OAAON,EAAGW,OAAON,GAAMG,MAAMd,UAAUe,MAAMC,KAAKT,IA0CvCW,CAAc,GAjES,SAAUC,EAAGC,GAC/C,IAAIC,EAAsB,mBAAXC,QAAyBH,EAAEG,OAAOC,UACjD,IAAKF,EAAG,OAAOF,EACf,IAAmBK,EAAYC,EAA3Bb,EAAIS,EAAEL,KAAKG,GAAOR,EAAK,GAC3B,IACI,WAAc,IAANS,GAAgBA,KAAM,MAAQI,EAAIZ,EAAEc,QAAQC,MAAMhB,EAAGiB,KAAKJ,EAAEK,OAExE,MAAOC,GAASL,EAAI,CAAEK,MAAOA,GAC7B,QACI,IACQN,IAAMA,EAAEG,OAASN,EAAIT,EAAU,SAAIS,EAAEL,KAAKJ,GAElD,QAAU,GAAIa,EAAG,MAAMA,EAAEK,OAE7B,OAAOnB,EAmDsBoB,CAAOlC,KAAKC,QAAQ,IAOjDH,EAAUK,UAAUgC,MAAQ,SAAUC,GAClC,IAAIC,EAAW,IAAIvC,EAInB,OAFAE,KAAKQ,SAAS8B,SAAQ,SAAUN,GAAS,OAAOK,EAASjC,IAAI4B,MAC7DI,EAAS5B,SAAS8B,SAAQ,SAAUN,GAAS,OAAOK,EAASjC,IAAI4B,MAC1DK,GAOXvC,EAAUK,UAAUoC,aAAe,SAAUH,GACzC,IAAII,EAAkB,IAAI1C,EAO1B,OALAE,KAAKQ,SACAiC,QAAO,SAAUC,GAAK,OAAON,EAAS9B,IAAIoC,MAC1CJ,SAAQ,SAAUI,GACnBF,EAAgBpC,IAAIsC,MAEjBF,GAOX1C,EAAUK,UAAUwC,WAAa,SAAUP,GACvC,IAAIQ,EAAgB,IAAI9C,EAOxB,OALAE,KAAKQ,SACAiC,QAAO,SAAUC,GAAK,OAAQN,EAAS9B,IAAIoC,MAC3CJ,SAAQ,SAAUI,GACnBE,EAAcxC,IAAIsC,MAEfE,GAOX9C,EAAUK,UAAU0C,WAAa,SAAUT,GACvC,GAAIpC,KAAK8C,OAASV,EAASU,OACvB,OAAO,EAEX,IAAIC,GAAW,EAOf,OALA/C,KAAKQ,SAAS8B,SAAQ,SAAUN,GACvBI,EAAS9B,IAAI0B,KACde,GAAW,MAGZA,GAMXjD,EAAUK,UAAU6C,QAAU,WAC1B,OAAuB,IAAhBhD,KAAK8C,QAMhBhD,EAAUK,UAAU2C,KAAO,WACvB,OAAO9C,KAAKC,MAAM6C,MAKtBhD,EAAUK,UAAU8C,MAAQ,WACxBjD,KAAKC,MAAQ,IAAIC,KAMrBJ,EAAUK,UAAU+C,SAAW,WAC3B,MAAO,GAAG9B,OAAOpB,KAAKQ,WA/HA,GAoIR,GACN2C,EAAEC,G","sources":["webpack:///./src/index.ts"],"sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar CustomSet = /** @class */ (function () {\n    function CustomSet(array) {\n        this.items = new Set(array);\n    }\n    /**\n     * @description: 向集合添加一个新元素。\n     * @param {T} element\n     * @return {boolean} 是否添加成功\n     */\n    CustomSet.prototype.add = function (element) {\n        if (!this.has(element)) {\n            this.items.add(element);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @description: 从集合移除一个元素。\n     * @param {T} element\n     * @return {boolean} 是否删除成功\n     */\n    CustomSet.prototype.delete = function (element) {\n        if (this.has(element)) {\n            return this.items.delete(element);\n        }\n        return false;\n    };\n    /**\n     * @description: 如果元素在集合中，返回 true，否则返回 false。\n     * @param {T} element\n     * @return {boolean}\n     */\n    CustomSet.prototype.has = function (element) {\n        return this.items.has(element);\n    };\n    /**\n     * @description: 返回一个包含集合中所有值（元素）的数组。\n     * @return {Array<T>}\n     */\n    CustomSet.prototype.values = function () {\n        return __spreadArray([], __read(this.items), false);\n    };\n    /**\n     * @description: 并集\n     * @param {CustomSet} otherSet\n     * @return {CustomSet}\n     */\n    CustomSet.prototype.union = function (otherSet) {\n        var unionSet = new CustomSet();\n        // 迭代两个集合，把元素都add进来\n        this.values().forEach(function (value) { return unionSet.add(value); });\n        otherSet.values().forEach(function (value) { return unionSet.add(value); });\n        return unionSet;\n    };\n    /**\n     * @description: 交集\n     * @param {CustomSet} otherSet\n     * @return {CustomSet}\n     */\n    CustomSet.prototype.intersection = function (otherSet) {\n        var intersectionSet = new CustomSet();\n        // 在当前集合中过滤掉otherSet中不存在的元素\n        this.values()\n            .filter(function (v) { return otherSet.has(v); })\n            .forEach(function (v) {\n            intersectionSet.add(v);\n        });\n        return intersectionSet;\n    };\n    /**\n     * @description: 差集\n     * @param {CustomSet} otherSet\n     * @return {CustomSet}\n     */\n    CustomSet.prototype.difference = function (otherSet) {\n        var differenceSet = new CustomSet();\n        // 在当前集合中过滤掉otherSet中也存在的元素\n        this.values()\n            .filter(function (v) { return !otherSet.has(v); })\n            .forEach(function (v) {\n            differenceSet.add(v);\n        });\n        return differenceSet;\n    };\n    /**\n     * @description: 是否为子集\n     * @param {CustomSet} otherSet\n     * @return {boolean}\n     */\n    CustomSet.prototype.isSubsetOf = function (otherSet) {\n        if (this.size() > otherSet.size()) {\n            return false;\n        }\n        var isSubset = true;\n        // 判据：当前集合的所有元素在otherSet中都存在\n        this.values().forEach(function (value) {\n            if (!otherSet.has(value)) {\n                isSubset = false;\n            }\n        });\n        return isSubset;\n    };\n    /**\n     * @description: 是否为空\n     * @return {boolean}\n     */\n    CustomSet.prototype.isEmpty = function () {\n        return this.size() === 0;\n    };\n    /**\n     * @description: 集合的元素数\n     * @return {number}\n     */\n    CustomSet.prototype.size = function () {\n        return this.items.size;\n    };\n    /**\n     * @description: 清空集合\n     */\n    CustomSet.prototype.clear = function () {\n        this.items = new Set();\n    };\n    /**\n     * @description: 替换原生toString\n     * @return {string}\n     */\n    CustomSet.prototype.toString = function () {\n        return \"\".concat(this.values());\n    };\n    return CustomSet;\n}());\nexport default CustomSet;\nvar bigNameForItToU = {};\nbigNameForItToU.b.d;\n"],"names":["CustomSet","array","this","items","Set","prototype","add","element","has","delete","values","to","from","pack","arguments","length","ar","i","l","Array","slice","call","concat","__spreadArray","o","n","m","Symbol","iterator","r","e","next","done","push","value","error","__read","union","otherSet","unionSet","forEach","intersection","intersectionSet","filter","v","difference","differenceSet","isSubsetOf","size","isSubset","isEmpty","clear","toString","b","d"],"sourceRoot":""}